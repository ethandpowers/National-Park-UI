{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ethan.powers/Pet Projects/NatParkUI2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { EventEmitter } from '@angular/core';\nimport { MatSnackBarConfig } from '@angular/material/snack-bar';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/select\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"@angular/material/progress-spinner\";\nimport * as i11 from \"@angular/material/core\";\n\nfunction SearchComponent_mat_optgroup_5_mat_option_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const param_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", param_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(param_r4);\n  }\n}\n\nfunction SearchComponent_mat_optgroup_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-optgroup\");\n    i0.ɵɵelementStart(1, \"p\", 1);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, SearchComponent_mat_optgroup_5_mat_option_3_Template, 2, 2, \"mat-option\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", option_r2.name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", option_r2.params);\n  }\n}\n\nexport class SearchComponent {\n  constructor(_snackbar, http, router) {\n    this._snackbar = _snackbar;\n    this.searchParks = true;\n    this.redirectToResults = true;\n    this.searchTrails = false;\n    this.searchEvent = new EventEmitter();\n    this.searchOptions = [];\n    this.searchParam = '';\n    this.searchValue = '';\n    this.data = [];\n    this.hiddenButton = true;\n    this.snackBar = _snackbar;\n    this.data = [];\n    this.http = http;\n    this.router = router;\n  }\n\n  ngOnInit() {\n    if (this.searchParks) {\n      this.searchOptions = [{\n        name: 'Parks',\n        params: ['Park Code', 'Park Name', 'State']\n      }, {\n        name: 'Species',\n        params: ['Id', 'Common Name', 'Scientific Name', 'Category', 'Order', 'Family', 'Conservation Status', 'Seasonality', 'Abundance']\n      }];\n    } else if (!this.searchTrails) {\n      this.searchOptions = [{\n        name: 'Species',\n        params: ['Id', 'Common Name', 'Scientific Name', 'Category', 'Order', 'Family', 'Conservation Status', 'Seasonality', 'Abundance']\n      }];\n    } else {\n      this.searchOptions = [{\n        name: 'Trails',\n        params: ['Id', 'Name', 'Area', 'City', 'Feature', 'Activity']\n      }];\n    }\n  }\n\n  GetData() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let controller = '';\n\n      if (_this.searchParks) {\n        if (_this.searchOptions[1].params.includes(_this.searchParam)) {\n          controller = 'species';\n        } else {\n          controller = 'natpark';\n        }\n      } else if (!_this.searchTrails) {\n        controller = 'species';\n      } else {\n        controller = 'trails';\n      }\n\n      let searchParameter = '';\n\n      let endpoint = 'by' + _this.searchParam.split(/\\s+/).join('');\n\n      if (_this.searchParam == 'Park Code') {\n        searchParameter = 'code';\n      }\n\n      if (_this.searchParam == 'Park Name') {\n        searchParameter = 'name';\n      }\n\n      if (_this.searchParam == 'State') {\n        searchParameter = 'state';\n      }\n\n      if (_this.searchParam == 'Id') {\n        searchParameter = 'id';\n      }\n\n      if (_this.searchParam == 'Common Name') {\n        searchParameter = 'name';\n      }\n\n      if (_this.searchParam == 'Scientific Name') {\n        searchParameter = 'name';\n      }\n\n      if (_this.searchParam == 'Category') {\n        searchParameter = 'category';\n      }\n\n      if (_this.searchParam == 'Order') {\n        searchParameter = 'order';\n      }\n\n      if (_this.searchParam == 'Family') {\n        searchParameter = 'family';\n      }\n\n      if (_this.searchParam == 'Conservation Status') {\n        searchParameter = 'status';\n      }\n\n      if (_this.searchParam == 'Seasonality') {\n        searchParameter = 'seasonality';\n      }\n\n      if (_this.searchParam == 'Abundance') {\n        searchParameter = 'abundance';\n      }\n\n      if (_this.searchParam == 'ID') {\n        searchParameter = 'id';\n      }\n\n      if (_this.searchParam == 'Name') {\n        searchParameter = 'name';\n      }\n\n      if (_this.searchParam == 'Area') {\n        searchParameter = 'area';\n      }\n\n      if (_this.searchParam == 'City') {\n        searchParameter = 'city';\n      }\n\n      if (_this.searchParam == 'Feature') {\n        searchParameter = 'feature';\n      }\n\n      if (_this.searchParam == 'Activity') {\n        searchParameter = 'activity';\n      }\n\n      let response = _this.http.get(`http://localhost:6600/api/${controller}/${endpoint}?${searchParameter}=${_this.searchValue}`, {\n        observe: 'response'\n      }).subscribe(data => {\n        _this.data = data.body;\n        console.log(_this.data);\n        response.unsubscribe();\n\n        _this.searchEvent.emit([_this.data, searchParameter]);\n\n        if (_this.redirectToResults) {\n          if (controller == 'species') {\n            _this.router.navigate(['species-results'], {\n              state: {\n                data: _this.data\n              },\n              queryParams: {\n                refresh: new Date().getTime()\n              }\n            });\n          } else {\n            _this.router.navigate(['park-results'], {\n              state: {\n                data: _this.data\n              },\n              queryParams: {\n                refresh: new Date().getTime()\n              }\n            });\n          }\n        }\n      }, error => {\n        let config = new MatSnackBarConfig();\n        config.duration = 3000;\n\n        _this.snackBar.open('No results found, please try again.', 'Okay', config);\n\n        return;\n      });\n    })();\n  }\n\n  checkForm() {\n    if (this.searchParam == '' || this.searchValue == '') {\n      let config = new MatSnackBarConfig();\n      config.duration = 3000;\n      this.snackBar.open('Please enter valid information', 'Okay', config);\n    } else {\n      this.GetData();\n    }\n  }\n\n  onKeystroke(value) {\n    this.searchValue = value;\n  }\n\n}\n\nSearchComponent.ɵfac = function SearchComponent_Factory(t) {\n  return new (t || SearchComponent)(i0.ɵɵdirectiveInject(i1.MatSnackBar), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.Router));\n};\n\nSearchComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SearchComponent,\n  selectors: [[\"app-search\"]],\n  inputs: {\n    searchParks: \"searchParks\",\n    redirectToResults: \"redirectToResults\",\n    searchTrails: \"searchTrails\"\n  },\n  outputs: {\n    searchEvent: \"searchEvent\"\n  },\n  decls: 14,\n  vars: 4,\n  consts: [[\"autocomplete\", \"off\", 3, \"ngSubmit\"], [2, \"font-family\", \"Cinzel\"], [\"name\", \"dropDown\", 2, \"font-family\", \"Cinzel\", 3, \"ngModel\", \"ngModelChange\"], [4, \"ngFor\", \"ngForOf\"], [2, \"margin-left\", \"20px\"], [\"matInput\", \"\", 2, \"font-family\", \"Cinzel\", 3, \"input\"], [\"myInput\", \"\"], [\"mat-icon-button\", \"\", \"type\", \"submit\"], [1, \"bi\", \"bi-search\", 3, \"hidden\"], [\"strokeWidth\", \"1\", \"diameter\", \"1\", 3, \"hidden\"], [\"style\", \"font-family: Cinzel;\", 3, \"value\", 4, \"ngFor\", \"ngForOf\"], [2, \"font-family\", \"Cinzel\", 3, \"value\"]],\n  template: function SearchComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r5 = i0.ɵɵgetCurrentView();\n\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function SearchComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.checkForm();\n      });\n      i0.ɵɵelementStart(1, \"mat-form-field\");\n      i0.ɵɵelementStart(2, \"mat-label\", 1);\n      i0.ɵɵtext(3, \"Search By\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"mat-select\", 2);\n      i0.ɵɵlistener(\"ngModelChange\", function SearchComponent_Template_mat_select_ngModelChange_4_listener($event) {\n        return ctx.searchParam = $event;\n      });\n      i0.ɵɵtemplate(5, SearchComponent_mat_optgroup_5_Template, 4, 2, \"mat-optgroup\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"mat-form-field\", 4);\n      i0.ɵɵelementStart(7, \"mat-label\", 1);\n      i0.ɵɵtext(8, \"Search Value\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"input\", 5, 6);\n      i0.ɵɵlistener(\"input\", function SearchComponent_Template_input_input_9_listener() {\n        i0.ɵɵrestoreView(_r5);\n\n        const _r1 = i0.ɵɵreference(10);\n\n        return ctx.onKeystroke(_r1.value);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"button\", 7);\n      i0.ɵɵelement(12, \"i\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"mat-spinner\", 9);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.searchParam);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.searchOptions);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"hidden\", ctx.hiddenButton);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"hidden\", !ctx.hiddenButton);\n    }\n  },\n  directives: [i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.NgForm, i5.MatFormField, i5.MatLabel, i6.MatSelect, i4.NgControlStatus, i4.NgModel, i7.NgForOf, i8.MatInput, i9.MatButton, i10.MatSpinner, i11.MatOptgroup, i11.MatOption],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzZWFyY2guY29tcG9uZW50LmNzcyJ9 */\"]\n});","map":{"version":3,"sources":["C:\\Users\\ethan.powers\\Pet Projects\\NatParkUI2\\src\\app\\Components\\search\\search.component.ts","C:\\Users\\ethan.powers\\Pet Projects\\NatParkUI2\\src\\app\\Components\\search\\search.component.html"],"names":[],"mappings":"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","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.css'],\n})\nexport class SearchComponent implements OnInit {\n  @Input() searchParks?: boolean = true;\n  @Input() redirectToResults?: boolean = true;\n  @Input() searchTrails?: boolean = false;\n  @Output() searchEvent = new EventEmitter<any[]>();\n  private readonly http;\n\n  constructor(\n    private _snackbar: MatSnackBar,\n    http: HttpClient,\n    router: Router\n  ) {\n    this.snackBar = _snackbar;\n    this.data = [];\n    this.http = http;\n    this.router = router;\n  }\n\n  ngOnInit(): void {\n    if (this.searchParks) {\n      this.searchOptions = [\n        {\n          name: 'Parks',\n          params: ['Park Code', 'Park Name', 'State'],\n        },\n        {\n          name: 'Species',\n          params: [\n            'Id',\n            'Common Name',\n            'Scientific Name',\n            'Category',\n            'Order',\n            'Family',\n            'Conservation Status',\n            'Seasonality',\n            'Abundance',\n          ],\n        },\n      ];\n    } else if (!this.searchTrails) {\n      this.searchOptions = [\n        {\n          name: 'Species',\n          params: [\n            'Id',\n            'Common Name',\n            'Scientific Name',\n            'Category',\n            'Order',\n            'Family',\n            'Conservation Status',\n            'Seasonality',\n            'Abundance',\n          ],\n        },\n      ];\n    } else {\n      this.searchOptions = [\n        {\n          name: 'Trails',\n          params: [\n            'Id',\n            'Name',\n            'Area',\n            'City',\n            'Feature',\n            'Activity'\n          ],\n        },\n      ];\n    }\n  }\n\n  async GetData() {\n    let controller = '';\n    if (this.searchParks) {\n      if (this.searchOptions[1].params.includes(this.searchParam)) {\n        controller = 'species';\n      } else {\n        controller = 'natpark';\n      }\n    }else if(!this.searchTrails){\n      controller = 'species';\n    }\n    else{\n      controller = 'trails'\n    }\n    let searchParameter = '';\n    let endpoint = 'by' + this.searchParam.split(/\\s+/).join('');\n    if (this.searchParam == 'Park Code') {\n      searchParameter = 'code';\n    }\n    if (this.searchParam == 'Park Name') {\n      searchParameter = 'name';\n    }\n    if (this.searchParam == 'State') {\n      searchParameter = 'state';\n    }\n    if (this.searchParam == 'Id') {\n      searchParameter = 'id';\n    }\n    if (this.searchParam == 'Common Name') {\n      searchParameter = 'name';\n    }\n    if (this.searchParam == 'Scientific Name') {\n      searchParameter = 'name';\n    }\n    if (this.searchParam == 'Category') {\n      searchParameter = 'category';\n    }\n    if (this.searchParam == 'Order') {\n      searchParameter = 'order';\n    }\n    if (this.searchParam == 'Family') {\n      searchParameter = 'family';\n    }\n    if (this.searchParam == 'Conservation Status') {\n      searchParameter = 'status';\n    }\n    if (this.searchParam == 'Seasonality') {\n      searchParameter = 'seasonality';\n    }\n    if (this.searchParam == 'Abundance') {\n      searchParameter = 'abundance';\n    }if (this.searchParam == 'ID') {\n      searchParameter = 'id';\n    }\n    if (this.searchParam == 'Name') {\n      searchParameter = 'name';\n    }\n    if (this.searchParam == 'Area') {\n      searchParameter = 'area';\n    }if (this.searchParam == 'City') {\n      searchParameter = 'city';\n    }\n    if (this.searchParam == 'Feature') {\n      searchParameter = 'feature';\n    }\n    if (this.searchParam == 'Activity') {\n      searchParameter = 'activity';\n    }\n    let response = this.http\n      .get<any>(\n        `http://localhost:6600/api/${controller}/${endpoint}?${searchParameter}=${this.searchValue}`,\n        { observe: 'response' }\n      )\n      .subscribe(\n        (data) => {\n          this.data = data.body;\n          console.log(this.data);\n\n          response.unsubscribe();\n          this.searchEvent.emit([this.data, searchParameter]);\n          if (this.redirectToResults) {\n            if (controller == 'species') {\n              this.router.navigate(['species-results'], {\n                state: { data: this.data },\n                queryParams: { refresh: new Date().getTime() },\n              });\n            } else {\n              this.router.navigate(['park-results'], {\n                state: { data: this.data },\n                queryParams: { refresh: new Date().getTime() },\n              });\n            }\n          }\n        },\n        (error) => {\n          let config = new MatSnackBarConfig();\n          config.duration = 3000;\n          this.snackBar.open(\n            'No results found, please try again.',\n            'Okay',\n            config\n          );\n          return;\n        }\n      );\n  }\n\n  checkForm() {\n    if (this.searchParam == '' || this.searchValue == '') {\n      let config = new MatSnackBarConfig();\n      config.duration = 3000;\n      this.snackBar.open('Please enter valid information', 'Okay', config);\n    } else {\n      this.GetData();\n    }\n  }\n\n  onKeystroke(value: string) {\n    this.searchValue = value;\n  }\n\n  searchOptions: any[] = [];\n  searchParam: string = '';\n  searchValue: string | number = '';\n  snackBar: MatSnackBar;\n  router: Router;\n  data: any[] = [];\n  hiddenButton:boolean = true;\n}\n","<form autocomplete=\"off\" (ngSubmit)=\"checkForm()\">\n    <mat-form-field>\n        <mat-label style=\"font-family: Cinzel;\">Search By</mat-label>\n        <mat-select name = \"dropDown\" style=\"font-family: Cinzel;\" [(ngModel)]=\"searchParam\">\n            <mat-optgroup *ngFor=\"let option of searchOptions\">\n                <p style=\"font-family: Cinzel;\">\n                {{ option.name }}\n                </p>\n                <mat-option *ngFor=\"let param of option.params\" [value]=\"param\" style=\"font-family: Cinzel;\">{{ param }}</mat-option>\n            </mat-optgroup>\n        </mat-select>\n    </mat-form-field>\n    <mat-form-field style=\"margin-left: 20px;\">\n        <mat-label style=\"font-family: Cinzel;\">Search Value</mat-label>\n        <input matInput style=\"font-family: Cinzel;\" #myInput (input)=\"onKeystroke(myInput.value)\">\n    </mat-form-field>\n    <button mat-icon-button type=\"submit\"><i class=\"bi bi-search\" [hidden]='hiddenButton'></i></button>\n    <mat-spinner [hidden]='!hiddenButton' strokeWidth=1 diameter=1></mat-spinner>\n</form>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}