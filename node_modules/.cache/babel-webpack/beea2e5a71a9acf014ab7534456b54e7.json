{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ethan.powers/Pet Projects/NatParkUI2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { MatSnackBarConfig } from '@angular/material/snack-bar';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/select\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"@angular/material/core\";\n\nfunction SearchComponent_mat_optgroup_5_mat_option_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const param_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", param_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(param_r4);\n  }\n}\n\nfunction SearchComponent_mat_optgroup_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-optgroup\");\n    i0.ɵɵelementStart(1, \"p\", 1);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, SearchComponent_mat_optgroup_5_mat_option_3_Template, 2, 2, \"mat-option\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", option_r2.name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", option_r2.params);\n  }\n}\n\nexport class SearchComponent {\n  constructor(_snackbar, http, router) {\n    this._snackbar = _snackbar;\n    this.searchOptions = [{\n      \"name\": \"Parks\",\n      \"params\": [\"Park Code\", \"Park Name\", \"State\"]\n    }, {\n      \"name\": \"Species\",\n      \"params\": [\"Id\", \"Common Name\", \"Scientific Name\", \"Category\", \"Order\", \"Family\", \"Conservation Status\", \"Seasonality\", \"Abundance\"]\n    }];\n    this.searchParam = \"\";\n    this.searchValue = \"\";\n    this.data = [];\n    this.snackBar = _snackbar;\n    this.data = [];\n    this.http = http;\n    this.router = router;\n  }\n\n  ngOnInit() {}\n\n  GetData() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let controller = \"\";\n\n      if (_this.searchOptions[1].params.includes(_this.searchParam)) {\n        controller = \"species\";\n      } else {\n        controller = \"natpark\";\n      }\n\n      let searchParameter = \"\";\n\n      let endpoint = \"by\" + _this.searchParam.split(/\\s+/).join('');\n\n      if (_this.searchParam == \"Park Code\") {\n        searchParameter = \"code\";\n      }\n\n      if (_this.searchParam == \"Park Name\") {\n        searchParameter = \"name\";\n      }\n\n      if (_this.searchParam == \"State\") {\n        searchParameter = \"state\";\n      }\n\n      if (_this.searchParam == \"Id\") {\n        searchParameter = \"id\";\n      }\n\n      if (_this.searchParam == \"Common Name\") {\n        searchParameter = \"name\";\n      }\n\n      if (_this.searchParam == \"Scientific Name\") {\n        searchParameter = \"name\";\n      }\n\n      if (_this.searchParam == \"Category\") {\n        searchParameter = \"category\";\n      }\n\n      if (_this.searchParam == \"Order\") {\n        searchParameter = \"order\";\n      }\n\n      if (_this.searchParam == \"Family\") {\n        searchParameter = \"family\";\n      }\n\n      if (_this.searchParam == \"Conservation Status\") {\n        searchParameter = \"status\";\n      }\n\n      if (_this.searchParam == \"Seasonality\") {\n        searchParameter = \"seasonality\";\n      }\n\n      if (_this.searchParam == \"Abundance\") {\n        searchParameter = \"abundance\";\n      }\n\n      let response = _this.http.get(`http://localhost:6600/api/${controller}/${endpoint}?${searchParameter}=${_this.searchValue}`, {\n        observe: 'response'\n      }).subscribe(data => {\n        _this.data = data.body;\n        console.log(_this.data);\n        response.unsubscribe();\n\n        if (controller == \"species\") {\n          _this.router.navigate(['species-results'], {\n            state: {\n              data: _this.data\n            },\n            queryParams: {\n              refresh: new Date().getTime()\n            }\n          });\n        } else {\n          _this.router.navigate(['park-results'], {\n            state: {\n              data: _this.data\n            },\n            queryParams: {\n              refresh: new Date().getTime()\n            }\n          });\n        }\n      }, error => {\n        let config = new MatSnackBarConfig();\n        config.duration = 3000;\n\n        _this.snackBar.open('No data found, please try again.', 'Okay', config);\n\n        return;\n      });\n    })();\n  }\n\n  checkForm() {\n    if (this.searchParam == \"\" || this.searchValue == \"\") {\n      let config = new MatSnackBarConfig();\n      config.duration = 3000;\n      this.snackBar.open('Please enter valid information', 'Okay', config);\n    } else {\n      this.GetData();\n    }\n  }\n\n  onKeystroke(value) {\n    this.searchValue = value;\n  }\n\n}\n\nSearchComponent.ɵfac = function SearchComponent_Factory(t) {\n  return new (t || SearchComponent)(i0.ɵɵdirectiveInject(i1.MatSnackBar), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.Router));\n};\n\nSearchComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SearchComponent,\n  selectors: [[\"app-search\"]],\n  decls: 13,\n  vars: 2,\n  consts: [[\"autocomplete\", \"off\", 3, \"ngSubmit\"], [2, \"font-family\", \"Cinzel\"], [\"name\", \"dropDown\", 2, \"font-family\", \"Cinzel\", 3, \"ngModel\", \"ngModelChange\"], [4, \"ngFor\", \"ngForOf\"], [2, \"margin-left\", \"20px\"], [\"matInput\", \"\", 2, \"font-family\", \"Cinzel\", 3, \"input\"], [\"myInput\", \"\"], [\"mat-icon-button\", \"\", \"type\", \"submit\"], [1, \"bi\", \"bi-search\"], [\"style\", \"font-family: Cinzel;\", 3, \"value\", 4, \"ngFor\", \"ngForOf\"], [2, \"font-family\", \"Cinzel\", 3, \"value\"]],\n  template: function SearchComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r5 = i0.ɵɵgetCurrentView();\n\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function SearchComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.checkForm();\n      });\n      i0.ɵɵelementStart(1, \"mat-form-field\");\n      i0.ɵɵelementStart(2, \"mat-label\", 1);\n      i0.ɵɵtext(3, \"Search By\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"mat-select\", 2);\n      i0.ɵɵlistener(\"ngModelChange\", function SearchComponent_Template_mat_select_ngModelChange_4_listener($event) {\n        return ctx.searchParam = $event;\n      });\n      i0.ɵɵtemplate(5, SearchComponent_mat_optgroup_5_Template, 4, 2, \"mat-optgroup\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"mat-form-field\", 4);\n      i0.ɵɵelementStart(7, \"mat-label\", 1);\n      i0.ɵɵtext(8, \"Search Value\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"input\", 5, 6);\n      i0.ɵɵlistener(\"input\", function SearchComponent_Template_input_input_9_listener() {\n        i0.ɵɵrestoreView(_r5);\n\n        const _r1 = i0.ɵɵreference(10);\n\n        return ctx.onKeystroke(_r1.value);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"button\", 7);\n      i0.ɵɵelement(12, \"i\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.searchParam);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.searchOptions);\n    }\n  },\n  directives: [i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.NgForm, i5.MatFormField, i5.MatLabel, i6.MatSelect, i4.NgControlStatus, i4.NgModel, i7.NgForOf, i8.MatInput, i9.MatButton, i10.MatOptgroup, i10.MatOption],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzZWFyY2guY29tcG9uZW50LmNzcyJ9 */\"]\n});","map":{"version":3,"sources":["C:\\Users\\ethan.powers\\Pet Projects\\NatParkUI2\\src\\app\\Components\\search\\search.component.ts","C:\\Users\\ethan.powers\\Pet Projects\\NatParkUI2\\src\\app\\Components\\search\\search.component.html"],"names":[],"mappings":"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","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { MatSnackBar, matSnackBarAnimations, MatSnackBarConfig } from '@angular/material/snack-bar';\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.css']\n})\nexport class SearchComponent implements OnInit {\n\n  private readonly http;\n\n  constructor(private _snackbar: MatSnackBar, http: HttpClient, router: Router) {\n    this.snackBar = _snackbar;\n    this.data = [];\n    this.http = http;\n    this.router = router;\n  }\n\n  ngOnInit(): void {\n  }\n\n  async GetData() {\n    let controller = \"\";\n    if (this.searchOptions[1].params.includes(this.searchParam)) { controller = \"species\" }\n    else { controller = \"natpark\" }\n    let searchParameter = \"\";\n    let endpoint = \"by\" + this.searchParam.split(/\\s+/).join('');\n    if (this.searchParam == \"Park Code\") { searchParameter = \"code\"; }\n    if (this.searchParam == \"Park Name\") { searchParameter = \"name\" }\n    if (this.searchParam == \"State\") { searchParameter = \"state\" }\n    if (this.searchParam == \"Id\") { searchParameter = \"id\" }\n    if (this.searchParam == \"Common Name\") { searchParameter = \"name\" }\n    if (this.searchParam == \"Scientific Name\") { searchParameter = \"name\" }\n    if (this.searchParam == \"Category\") { searchParameter = \"category\" }\n    if (this.searchParam == \"Order\") { searchParameter = \"order\" }\n    if (this.searchParam == \"Family\") { searchParameter = \"family\" }\n    if (this.searchParam == \"Conservation Status\") { searchParameter = \"status\" }\n    if (this.searchParam == \"Seasonality\") { searchParameter = \"seasonality\" }\n    if (this.searchParam == \"Abundance\") { searchParameter = \"abundance\" }\n    let response = this.http.get<any>(`http://localhost:6600/api/${controller}/${endpoint}?${searchParameter}=${this.searchValue}`, { observe: 'response' }).subscribe(data => {\n      this.data = data.body;\n      console.log(this.data);\n\n      response.unsubscribe();\n\n      if (controller == \"species\") {\n        this.router.navigate(['species-results'], { state: { data: this.data }, queryParams: { refresh: new Date().getTime() } });\n      } else {\n        this.router.navigate(['park-results'], { state: { data: this.data }, queryParams: { refresh: new Date().getTime() } });\n      }\n    }, error => {\n      let config = new MatSnackBarConfig();\n      config.duration = 3000;\n      this.snackBar.open('No data found, please try again.', 'Okay', config)\n      return;\n    });\n  }\n\n  checkForm() {\n    if (this.searchParam == \"\" || this.searchValue == \"\") {\n      let config = new MatSnackBarConfig();\n      config.duration = 3000;\n      this.snackBar.open('Please enter valid information', 'Okay', config)\n    }\n    else {\n      this.GetData();\n    }\n  }\n\n  onKeystroke(value: string) {\n    this.searchValue = value;\n  }\n\n  searchOptions = [\n    {\n      \"name\": \"Parks\", \"params\": [\n        \"Park Code\",\n        \"Park Name\",\n        \"State\"]\n    },\n    {\n      \"name\": \"Species\", \"params\": [\"Id\",\n        \"Common Name\",\n        \"Scientific Name\",\n        \"Category\",\n        \"Order\",\n        \"Family\",\n        \"Conservation Status\",\n        \"Seasonality\",\n        \"Abundance\"]\n    }\n  ];\n  searchParam: string = \"\";\n  searchValue: string | number = \"\";\n  snackBar: MatSnackBar;\n  router: Router;\n  data: any[] = [];\n}\n","<form autocomplete=\"off\" (ngSubmit)=\"checkForm()\">\n    <mat-form-field>\n        <mat-label style=\"font-family: Cinzel;\">Search By</mat-label>\n        <mat-select name = \"dropDown\" style=\"font-family: Cinzel;\" [(ngModel)]=\"searchParam\">\n            <mat-optgroup *ngFor=\"let option of searchOptions\">\n                <p style=\"font-family: Cinzel;\">\n                {{ option.name }}\n                </p>\n                <mat-option *ngFor=\"let param of option.params\" [value]=\"param\" style=\"font-family: Cinzel;\">{{ param }}</mat-option>\n            </mat-optgroup>\n        </mat-select>\n    </mat-form-field>\n    <mat-form-field style=\"margin-left: 20px;\">\n        <mat-label style=\"font-family: Cinzel;\">Search Value</mat-label>\n        <input matInput style=\"font-family: Cinzel;\" #myInput (input)=\"onKeystroke(myInput.value)\">\n    </mat-form-field>\n    <button mat-icon-button type=\"submit\"><i class=\"bi bi-search\"></i></button>\n</form>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}